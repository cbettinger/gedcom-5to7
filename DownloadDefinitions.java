import java.net.URL;
import java.util.Scanner;
import java.util.TreeMap;
import java.util.TreeSet;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.File;

public class DownloadDefinitions {
    static void printStringArrayCode(Iterable<String> toPrint, String name, PrintWriter out) {
        out.println("    private static final String[] "+name+" =");
        char before = '{';
        for(String val : toPrint) {
            out.println("        "+before+'"'+val+'"');
            before = ',';
        }
        out.println("        };");
    }
    static TreeMap<String,String> readTSV(Scanner src) {
        TreeMap<String,String> ans = new TreeMap<String,String>();
        while(src.hasNext()) {
            String line = src.nextLine();
            ans.put(line.replaceAll("\t[^\t]*$",""), line.replaceAll("[^\t]*\t",""));
        }
        return ans;
    }
    static void addTags(TreeMap<String,String> src, TreeMap<String,String> dst) {
        for(String key : src.keySet()) {
            String tag = key.split("\t")[1];
            String val = src.get(key);
            String old = dst.get(val);
            if (old != null && !tag.equals(old))
                throw new RuntimeException("ERROR: uri "+val+" has multiple tags\n\t- "+old+"\n\t- "+tag);
            else if (old == null) dst.put(val, tag);
        }
    }
    
    public static void main(String[] args) throws IOException {
        try (PrintWriter dest = new PrintWriter(new File("edu/virginia/ged5to7/GedcomDefinitions.java"))) {
            dest.println("/* WARNING: This file is automatically generated and should not be edited by hand */");
            dest.println("package edu.virginia.ged5to7;");
            dest.println("import static java.util.Arrays.binarySearch;");
            dest.println("\n/** A container for the substructure, payload, and enumeration rules from gedcom.io */");
            dest.println("public class GedcomDefinitions {");
                

            Scanner s;
            TreeMap<String,String> known;
            TreeMap<String,String> tagOf = new TreeMap<String,String>();
            
            // enumerations
            s = new Scanner(new URL("https://github.com/FamilySearch/GEDCOM/raw/main/extracted-files/enumerations.tsv").openStream());
            known = readTSV(s);
            printStringArrayCode(known.keySet(), "enumKeys", dest);
            printStringArrayCode(known.values(), "enumVals", dest);
            printStringArrayCode(new TreeSet<String>(known.values()), "enumSet", dest);
            addTags(known, tagOf);
            
            dest.println("    /** Looks up the URI of an enumeration based on the GEDCOM 7 spec");
            dest.println("     * @param ctx the URI of the containing structure.");
            dest.println("     *            use <code>null</code> for an extension.");
            dest.println("     * @param tag the enumeration value");
            dest.println("     * @return the URI of the enumeration value, or <code>null</code> if unknown");
            dest.println("     */");
            dest.println("    public static String enumURI(String ctx, String tag) {");
            dest.println("        if (ctx == null) {");
            dest.println("            String val = \"https://gedcom.io/terms/v7/\"+tag;");
            dest.println("            int idx = binarySearch(enumSet, val);");
            dest.println("            if (idx < 0) return null;");
            dest.println("            return enumSet[idx];");
            dest.println("        } else {");
            dest.println("            String key = ctx+'\\t'+tag;");
            dest.println("            int idx = binarySearch(enumKeys, key);");
            dest.println("            if (idx < 0) return null;");
            dest.println("            return enumVals[idx];");
            dest.println("        }");
            dest.println("    }");
            dest.println("    public static boolean isStdEnum(String uri) {");
            dest.println("        return binarySearch(enumSet, uri) >= 0;");
            dest.println("    }");
            
            dest.println();
            
            // substructures
            s = new Scanner(new URL("https://github.com/FamilySearch/GEDCOM/raw/main/extracted-files/substructures.tsv").openStream());
            known = readTSV(s);
            known.put("\tHEAD", "HEAD pseudostructure"); //// HARD-CODE based on substructures.tsv implementation
            printStringArrayCode(known.keySet(), "structKeys", dest);
            printStringArrayCode(known.values(), "structVals", dest);
            printStringArrayCode(new TreeSet<String>(known.values()), "structSet", dest);
            addTags(known, tagOf);

            dest.println("    /** Looks up the URI of an structure type based on the GEDCOM 7 spec");
            dest.println("     * @param ctx the URI of the containing structure type");
            dest.println("     *            use <code>\"\"</code> for a record and <code>null</code> for an extension.");
            dest.println("     * @param tag the tag of the structure");
            dest.println("     * @return the URI of the structure type, or <code>null</code> if unknown");
            dest.println("     */");
            dest.println("    public static String structURI(String ctx, String tag) {");
            dest.println("        if (ctx == null) {");
            dest.println("            String val = \"https://gedcom.io/terms/v7/\"+tag;");
            dest.println("            int idx = binarySearch(structSet, val);");
            dest.println("            if (idx < 0) return null;");
            dest.println("            return structSet[idx];");
            dest.println("        } else {");
            dest.println("            String key = ctx+'\\t'+tag;");
            dest.println("            int idx = binarySearch(structKeys, key);");
            dest.println("            if (idx < 0) return null;");
            dest.println("            return structVals[idx];");
            dest.println("        }");
            dest.println("    }");
            dest.println("    public static boolean isStdStruct(String uri) {");
            dest.println("        return binarySearch(structSet, uri) >= 0;");
            dest.println("    }");
                  
            printStringArrayCode(tagOf.keySet(), "tagKeys", dest);
            printStringArrayCode(tagOf.values(), "tagVals", dest);
            
            dest.println("    /** Looks up the tag of a structure URI based on the GEDCOM 7 spec");
            dest.println("     * @param uri the URI of the structure type");
            dest.println("     * @return the tag of the structure type, or <code>null</code> if unknown");
            dest.println("     */");
            dest.println("    public static String structTag(String uri) {");
            dest.println("        if (uri == null) return null;");
            dest.println("        int idx = binarySearch(tagKeys, uri);");
            dest.println("        if (idx < 0) return null;");
            dest.println("        return tagVals[idx];");
            dest.println("    }");
            
            dest.println();
            
            // payloads
            s = new Scanner(new URL("https://github.com/FamilySearch/GEDCOM/raw/main/extracted-files/payloads.tsv").openStream());
            known = readTSV(s);
            printStringArrayCode(known.keySet(), "payloadKeys", dest);
            printStringArrayCode(known.values(), "payloadVals", dest);

            dest.println("    /** Looks up the payload type of a structure based on the GEDCOM 7 spec");
            dest.println("     * @param ctx the URI of the containing structure type");
            dest.println("     * @return the type code (URI or <code>\"Y|<NULL>\"</code> or <code>\"\"</code> or <code>\"@XREF:</code>tag<code>\"</code>) of the payload type, or <code>null</code> if unknown");
            dest.println("     */");
            dest.println("    public static String payloadURI(String ctx) {");
            dest.println("        if (ctx == null) return null;");
            dest.println("        int idx = binarySearch(payloadKeys, ctx);");
            dest.println("        if (idx < 0) return null;");
            dest.println("        return payloadVals[idx];");
            dest.println("    }");
            
            // FHISO's language mapping
            s = new Scanner(new URL("https://github.com/fhiso/legacy-format/raw/master/languages.tsv").openStream());
            known = readTSV(s);
            printStringArrayCode(known.keySet(), "langKeys", dest);
            printStringArrayCode(known.values(), "langVals", dest);
            dest.println("    /** Looks up the language tag type of a language based ELF's mapping");
            dest.println("     * @param lang the 5.5.1 language name");
            dest.println("     * @return the BCP-47 language tag, or <code>null</code> if unknown");
            dest.println("     */");
            dest.println("    public static String langTag(String ctx) {");
            dest.println("        if (ctx == null) return null;");
            dest.println("        int idx = binarySearch(langKeys, ctx, String.CASE_INSENSITIVE_ORDER);");
            dest.println("        if (idx < 0) return null;");
            dest.println("        return langVals[idx].replace(\"*\",\"\");");
            dest.println("    }");
            
            
            
            
            
            dest.println("}");
        }
    }
}
